{%- set name = name|default('Redis Sentinel') -%}

{%- set description = description|default('') -%}

{%- set seed = ['Allenta', 'Redis Sentinel']|join('/') -%}

{%- set master = 'redis_sentinel.stats["{$REDIS_SENTINEL.LOCATIONS}"]' -%}

{#-#########################################################################-#}
{#- MACROS -#}
{#-#########################################################################-#}

{%- macro trigger(definition) -%}
    {% if version not in ('5.0', '5.2') %}
        <uuid>{{ [seed, definition.id]|join('/')|zuuid }}</uuid>
    {% endif %}
    <expression>{{ definition.expression|e }}</expression>
    <name>{{ definition.name|e }}</name>
    <priority>{{ definition.priority }}</priority>
    {% if 'recovery' in definition %}
        <recovery_mode>RECOVERY_EXPRESSION</recovery_mode>
        <recovery_expression>{{ definition.recovery|e }}</recovery_expression>
    {% else %}
        <recovery_mode>EXPRESSION</recovery_mode>
        <recovery_expression/>
    {% endif %}
{%- endmacro -%}

{%- macro discovery_rule(rule, items, triggers) -%}
    <discovery_rule>
        {% if version not in ('5.0', '5.2') %}
            <uuid>{{ [seed, rule.id]|join('/')|zuuid }}</uuid>
        {% endif %}
        <name>{{ rule.name|e }}</name>
        <type>ZABBIX_ACTIVE</type>
        <key>{{ rule.key|e }}</key>
        <delay>{$REDIS_SENTINEL.LLD_UPDATE_INTERVAL:&quot;{{ rule.context }}&quot;}</delay>
        <lifetime>{$REDIS_SENTINEL.LLD_KEEP_LOST_RESOURCES_PERIOD:&quot;{{ rule.context }}&quot;}</lifetime>
        {% if rule.context != 'items' %}
            <filter>
                <conditions>
                    <condition>
                        <formulaid>A</formulaid>
                        <macro>{{ '{#' }}SUBJECT}</macro>
                        <operator>NOT_MATCHES_REGEX</operator>
                        <value>{$REDIS_SENTINEL.LLD_EXCLUDED_SUBJECTS:&quot;{{ rule.context }}&quot;}</value>
                    </condition>
                </conditions>
            </filter>
        {% endif %}
        <item_prototypes>
            {% for item in items %}
                <item_prototype>
                    {% if version not in ('5.0', '5.2') %}
                        <uuid>{{ [seed, item.id]|join('/')|zuuid }}</uuid>
                    {% endif %}
                    <name>Redis Sentinel[{{ '{#' }}LOCATION}] - {{ item.name|e }}</name>
                    <type>{{ item.type }}</type>
                    <key>{{ item.key|e }}</key>
                    {% if 'delay' in item and item.delay %}
                        <delay>{$REDIS_SENTINEL.ITEM_UPDATE_INTERVAL}</delay>
                    {% else %}
                        <delay>0</delay>
                    {% endif %}
                    {% if 'history' in item and not item.history %}
                        <history>0</history>
                    {% else %}
                        <history>{$REDIS_SENTINEL.ITEM_HISTORY_STORAGE_PERIOD}</history>
                    {% endif %}
                    {% if 'trends' in item and not item.trends %}
                        <trends>0</trends>
                    {% else %}
                        <trends>{$REDIS_SENTINEL.ITEM_TREND_STORAGE_PERIOD}</trends>
                    {% endif %}
                    <value_type>{{ item.value_type }}</value_type>
                    <units>{{ item.units|default('')|e }}</units>
                    <params>{{ item.params|default('')|e }}</params>
                    {% if version in ('5.0', '5.2') %}
                        <applications>
                            <application>
                                <name>Redis Sentinel</name>
                            </application>
                        </applications>
                    {% else %}
                        <tags>
                            <tag>
                                <tag>Application</tag>
                                <value>Redis Sentinel</value>
                            </tag>
                        </tags>
                    {% endif %}
                    {% if 'master_item_key' in item %}
                        <master_item>
                            <key>{{ item.master_item_key|e }}</key>
                        </master_item>
                    {% endif %}
                    {% if 'preprocessing' in item %}
                        <preprocessing>
                            {% for step in item.preprocessing %}
                                <step>
                                    <type>{{ step.type }}</type>
                                    {% if version == '5.0' -%}
                                        {% for param in step.params|default([]) %}
                                            <params>{{ param|e }}</params>
                                        {% endfor %}
                                    {% else %}
                                        <parameters>
                                            {% for param in step.params|default([]) %}
                                                <parameter>{{ param|e }}</parameter>
                                            {% endfor %}
                                        </parameters>
                                    {% endif %}
                                    <error_handler>{{ step.error_handler|default('ORIGINAL_ERROR') }}</error_handler>
                                    <error_handler_params/>
                                </step>
                            {% endfor %}
                        </preprocessing>
                    {% endif %}
                </item_prototype>
            {% endfor %}
        </item_prototypes>
        <trigger_prototypes>
            {% for definition in triggers %}
                <trigger_prototype>
                    {{ trigger(definition) }}
                </trigger_prototype>
            {% endfor %}
        </trigger_prototypes>
    </discovery_rule>
{%- endmacro -%}

{#-#########################################################################-#}
{#- MAIN -#}
{#-#########################################################################-#}

<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>{{ version }}</version>
    <date>2018-10-30T08:22:30Z</date>
    <groups>
        <group>
            {% if version not in ('5.0', '5.2') %}
                <uuid>7df96b18c230490a9a0a9e2307226338</uuid>
            {% endif %}
            <name>Templates</name>
        </group>
    </groups>
    <templates>
        <template>
            {% if version not in ('5.0', '5.2') %}
                <uuid>{{ [seed]|join('/')|zuuid }}</uuid>
            {% endif %}
            <template>Template App {{ name|e }}</template>
            <name>Template App {{ name|e }}</name>
            {% if description %}
                <description>{{ description|e }}</description>
            {% endif %}
            <groups>
                <group>
                    <name>Templates</name>
                </group>
            </groups>
            {% if version in ('5.0', '5.2') %}
                <applications>
                    <application>
                        <name>Redis Sentinel</name>
                    </application>
                </applications>
            {% endif %}

            {#-#############################################################-#}
            {#- ITEMS -#}
            {#-#############################################################-#}

            <items>
                {% for item in [
                        {
                            'id': 'item-1',
                            'name': 'stats',
                            'key': master,
                            'history': false,
                            'trends': false,
                            'value_type': 'TEXT',
                            'triggers': [],
                        },
                        {
                            'id': 'item-2',
                            'name': '$1 processes',
                            'key': 'proc.num[redis-sentinel]',
                            'value_type': 'UNSIGNED',
                            'triggers': [
                                {
                                    'id': 'trigger-1.1',
                                    'name': 'Redis Sentinel is not running',
                                    'expression':
                                        '{Template App ' + name + ':proc.num[redis-sentinel].last()}'
                                        '<{$REDIS_SENTINEL.PROCESSES.MIN}'
                                        if version in ('5.0', '5.2') else
                                        'last(/Template App ' + name + '/proc.num[redis-sentinel])'
                                        '<{$REDIS_SENTINEL.PROCESSES.MIN}',
                                    'priority': 'DISASTER',
                                },
                            ],
                        },
                    ] %}
                    <item>
                        {% if version not in ('5.0', '5.2') %}
                            <uuid>{{ [seed, item.id]|join('/')|zuuid }}</uuid>
                        {% endif %}
                        <name>Redis Sentinel - {{ item.name|e }}</name>
                        <type>ZABBIX_ACTIVE</type>
                        <key>{{ item.key|e }}</key>
                        <delay>{$REDIS_SENTINEL.ITEM_UPDATE_INTERVAL}</delay>
                        {% if 'history' in item and not item.history %}
                            <history>0</history>
                        {% else %}
                            <history>{$REDIS_SENTINEL.ITEM_HISTORY_STORAGE_PERIOD}</history>
                        {% endif %}
                        {% if 'trends' in item and not item.trends %}
                            <trends>0</trends>
                        {% else %}
                            <trends>{$REDIS_SENTINEL.ITEM_TREND_STORAGE_PERIOD}</trends>
                        {% endif %}
                        <value_type>{{ item.value_type }}</value_type>
                        <units>{{ item.units|default('')|e }}</units>
                        {% if version in ('5.0', '5.2') %}
                            <applications>
                                <application>
                                    <name>Redis Sentinel</name>
                                </application>
                            </applications>
                        {% else %}
                            <tags>
                                <tag>
                                    <tag>Application</tag>
                                    <value>Redis Sentinel</value>
                                </tag>
                            </tags>
                        {% endif %}
                        {% if item.triggers %}
                            <triggers>
                                {% for definition in item.triggers %}
                                    <trigger>
                                        {{ trigger(definition) }}
                                    </trigger>
                                {% endfor %}
                            </triggers>
                        {% endif %}
                        {% if item.name == 'stats' %}
                            <preprocessing>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    {% if version == '5.0' %}
                                        <params>
                                    {% else %}
                                        <parameters><parameter>
                                    {% endif %}
                                        var exclusions = '{$REDIS_SENTINEL.EXCLUDED_STATS}'.trim();

                                        // This check is not just a simple optimization to avoid using never matching
                                        // regexps like '^(?!)' when filtering is not needed. JavaScript based filtering
                                        // effectively limits precision of numeric values and it could trigger rendering
                                        // of values using scientific notation.
                                        if (exclusions !== '') {
                                            exclusions = new RegExp(exclusions);

                                            var stats = JSON.parse(value);

                                            Object.keys(stats).forEach(function(key) {
                                                var name = key.replace(/^[^.]*[.]/, '');
                                                if (exclusions.test(name)) {
                                                    delete stats[key];
                                                }
                                            });

                                            return JSON.stringify(stats);
                                        } else {
                                            return value;
                                        }
                                    {% if version == '5.0' %}
                                        </params>
                                    {% else %}
                                        </parameter></parameters>
                                    {% endif %}
                                </step>
                            </preprocessing>
                        {% endif %}
                    </item>
                {% endfor %}
            </items>

            {#-#############################################################-#}
            {#- DISCOVERY RULES -#}
            {#-#############################################################-#}

            <discovery_rules>
                {#-#########################################################-#}
                {#- ITEMS DISCOVERY -#}
                {#-#########################################################-#}

                {{ discovery_rule(
                    {
                        'id': 'discovery-rule-1',
                        'name': 'Items discovery',
                        'key': 'redis_sentinel.discovery["{$REDIS_SENTINEL.LOCATIONS}","items"]',
                        'context': 'items',
                    },
                    [
                        {
                            'id': 'item-prototype-1.1',
                            'name': 'sentinel:sentinel_masters',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","sentinel:sentinel_masters"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.sentinel:sentinel_masters\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-1.2',
                            'name': 'sentinel:sentinel_running_scripts',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","sentinel:sentinel_running_scripts"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.sentinel:sentinel_running_scripts\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-1.3',
                            'name': 'sentinel:sentinel_scripts_queue_length',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","sentinel:sentinel_scripts_queue_length"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.sentinel:sentinel_scripts_queue_length\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-1.4',
                            'name': 'server:uptime_in_seconds',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","server:uptime_in_seconds"]',
                            'value_type': 'UNSIGNED',
                            'units': 'uptime',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.server:uptime_in_seconds\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                    ],
                    [
                        {
                            'id': 'trigger-prototype-1.1',
                            'name': 'Redis Sentinel[{#LOCATION}] has been restarted',
                            'expression':
                                '{Template App ' + name + ':redis_sentinel.info["{#LOCATION_ID}","server:uptime_in_seconds"].last()}'
                                '<{$REDIS_SENTINEL.UPTIME.MIN:"{#LOCATION_ID}"}'
                                if version in ('5.0', '5.2') else
                                'last(/Template App ' + name + '/redis_sentinel.info["{#LOCATION_ID}","server:uptime_in_seconds"])'
                                '<{$REDIS_SENTINEL.UPTIME.MIN:"{#LOCATION_ID}"}',
                            'priority': 'HIGH',
                        },
                    ]) }}

                {#-#########################################################-#}
                {#- MASTERS DISCOVERY -#}
                {#-#########################################################-#}

                {{ discovery_rule(
                    {
                        'id': 'discovery-rule-2',
                        'name': 'Masters discovery',
                        'key': 'redis_sentinel.discovery["{$REDIS_SENTINEL.LOCATIONS}","masters"]',
                        'context': 'masters',
                    },
                    [
                        {
                            'id': 'item-prototype-2.1',
                            'name': 'masters:{#SUBJECT}:ckquorum',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:ckquorum"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.masters:{#SUBJECT_ID}:ckquorum\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                                {
                                    'type': 'BOOL_TO_DECIMAL',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-2.2',
                            'name': 'masters:{#SUBJECT}:sentinels',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:sentinels"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.masters:{#SUBJECT_ID}:sentinels\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-2.3',
                            'name': 'masters:{#SUBJECT}:slaves',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:slaves"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.masters:{#SUBJECT_ID}:slaves\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-2.4',
                            'name': 'masters:{#SUBJECT}:status',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:status"]',
                            'value_type': 'TEXT',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.masters:{#SUBJECT_ID}:status\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                        {
                            'id': 'item-prototype-2.5',
                            'name': 'masters:{#SUBJECT}:usable_sentinels',
                            'type': 'DEPENDENT',
                            'key': 'redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:usable_sentinels"]',
                            'value_type': 'UNSIGNED',
                            'master_item_key': master,
                            'preprocessing': [
                                {
                                    'type': 'JSONPATH',
                                    'params': ['$[\'{#LOCATION_ID}.masters:{#SUBJECT_ID}:usable_sentinels\']'],
                                    'error_handler': 'DISCARD_VALUE',
                                },
                            ],
                        },
                    ],
                    [
                        {
                            'id': 'trigger-prototype-2.1',
                            'name': 'Redis Sentinel[{#LOCATION}] {#SUBJECT} cannot reach quorum',
                            'expression':
                                '{$REDIS_SENTINEL.QUORUM.ENABLED:"{#LOCATION_ID}:{#SUBJECT_ID}"} and '
                                '{Template App ' + name + ':redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:ckquorum"].last()}'
                                '<>1'
                                if version in ('5.0', '5.2') else
                                '{$REDIS_SENTINEL.QUORUM.ENABLED:"{#LOCATION_ID}:{#SUBJECT_ID}"} and '
                                'last(/Template App ' + name + '/redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:ckquorum"])'
                                '<>1',
                            'priority': 'HIGH',
                        },
                        {
                            'id': 'trigger-prototype-2.2',
                            'name': 'Redis Sentinel[{#LOCATION}] {#SUBJECT} is not able to use all sentinels',
                            'expression':
                                '{$REDIS_SENTINEL.USABLE_SENTINELS.ENABLED:"{#LOCATION_ID}:{#SUBJECT_ID}"} and '
                                '{Template App ' + name + ':redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:sentinels"].last()}'
                                '<>{Template App ' + name + ':redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:usable_sentinels"].last()}'
                                if version in ('5.0', '5.2') else
                                '{$REDIS_SENTINEL.USABLE_SENTINELS.ENABLED:"{#LOCATION_ID}:{#SUBJECT_ID}"} and '
                                'last(/Template App ' + name + '/redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:sentinels"])'
                                '<>last(/Template App ' + name + '/redis_sentinel.info["{#LOCATION_ID}","masters:{#SUBJECT_ID}:usable_sentinels"])',
                            'priority': 'HIGH',
                        },
                    ]) }}
            </discovery_rules>

            {#-#############################################################-#}
            {#- TAGS -#}
            {#-#############################################################-#}

            <tags>
                <tag>
                    <tag>Application</tag>
                    <value>Redis Sentinel</value>
                </tag>
            </tags>

            {#-#############################################################-#}
            {#- MACROS -#}
            {#-#############################################################-#}

            <macros>
                {% for macro in [
                        ('{$REDIS_SENTINEL.LOCATIONS}', ''),
                        ('{$REDIS_SENTINEL.EXCLUDED_STATS}', ''),

                        ('{$REDIS_SENTINEL.PROCESSES.MIN}', '1'),

                        ('{$REDIS_SENTINEL.LLD_EXCLUDED_SUBJECTS}', '^(?!)'),
                        ('{$REDIS_SENTINEL.LLD_KEEP_LOST_RESOURCES_PERIOD}', '30d'),
                        ('{$REDIS_SENTINEL.LLD_UPDATE_INTERVAL}', '1h'),

                        ('{$REDIS_SENTINEL.ITEM_HISTORY_STORAGE_PERIOD}', '30d'),
                        ('{$REDIS_SENTINEL.ITEM_TREND_STORAGE_PERIOD}', '365d'),
                        ('{$REDIS_SENTINEL.ITEM_UPDATE_INTERVAL}', '1m'),

                        ('{$REDIS_SENTINEL.UPTIME.MIN}', '10m'),

                        ('{$REDIS_SENTINEL.QUORUM.ENABLED}', '1'),
                        ('{$REDIS_SENTINEL.USABLE_SENTINELS.ENABLED}', '1'),
                    ] %}
                    <macro>
                        <macro>{{ macro[0]|e }}</macro>
                        <value>{{ macro[1]|e }}</value>
                    </macro>
                {% endfor %}
            </macros>
        </template>
    </templates>
</zabbix_export>
